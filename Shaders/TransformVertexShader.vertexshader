#version 400

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 3) in vec3 position_data;
layout(location = 4) in mat4 orientation_data;


// Output data ; will be interpolated for each fragment.
out vec2 UV;

// Values that stay constant for the whole mesh.
uniform mat4 VP;
uniform float time;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	// gl_Position =  VP * vec4(newposition,1);

	vec4 newposition = orientation_data * vec4(vertexPosition_modelspace,1) + vec4(position_data,1);
	// newposition.x += sin(newposition.z*2)*0.2;
	gl_Position = VP * ( newposition ) ;


	// UV of the vertex. No special space for this one.
	UV = vertexUV;
}

